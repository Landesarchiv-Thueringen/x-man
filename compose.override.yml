# Development additions and overrides

services:
  gui:
    build:
      context: ./gui
      args:
        - http_proxy=${HTTP_PROXY}
        - https_proxy=${HTTPS_PROXY}
        - CONFIGURATION=development
    restart: "no"

  mongo:
    restart: "no"

  server:
    build:
      context: ./server
      args:
        - http_proxy=${HTTP_PROXY}
        - https_proxy=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
    depends_on:
      ldap:
        condition: service_healthy
        restart: true
    volumes:
      - ./debug-data:/debug-data
    environment:
      - DEBUG_MODE=true
      - GIN_MODE=debug
      - INIT_TEST_SETUP=true
      - TRANSFER_DIR_SCAN_INTERVAL_SECONDS=1
      - WEBDAV_USERNAME=${WEBDAV_USERNAME}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD}
      - NO_PROXY=${NO_PROXY},webdav
    ports:
      - 3000:80
    # This is only needed in case you want to connect to a service via a port
    # exposed on the host, e.g., to Borg.
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: "no"

  report:
    build:
      context: ./report
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
    environment:
      - GIN_MODE=debug
    restart: "no"

  mongo-express:
    image: docker.io/mongo-express
    depends_on:
      mongo:
        condition: service_healthy
        restart: true
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongo:27017/
      ME_CONFIG_BASICAUTH: "false"

  webdav:
    image: docker.io/bytemark/webdav
    environment:
      USERNAME: ${WEBDAV_USERNAME}
      PASSWORD: ${WEBDAV_PASSWORD}
    ports:
      - 8082:80
    volumes:
      - ./data/webdav:/var/lib/dav

  # LDAP test server with default credentials
  ldap:
    image: ghcr.io/rroemhild/docker-test-openldap:master
    ulimits:
      nofile: 1024
    healthcheck:
      test: ldapsearch -H ldap://localhost:10389 -x -b "ou=people,dc=planetexpress,dc=com" cn
      interval: 3s
      timeout: 1s
    volumes:
      - ./data/tls/ldap.crt:/etc/ldap/ssl/ldap.crt
      - ./data/tls/ldap.key:/etc/ldap/ssl/ldap.key

  # SMTP test server with a web UI to inspect received e-mails
  mailhog:
    image: docker.io/mailhog/mailhog
    ports:
      - 8025:8025 # web ui

  # TLS wrapper for Mailhog
  mailhog-tls:
    image: docker.io/dweomer/stunnel
    environment:
      - STUNNEL_SERVICE=smtps
      - STUNNEL_ACCEPT=465
      - STUNNEL_CONNECT=mailhog:1025
    volumes:
      - ./data/tls/mailhog-tls.crt:/etc/stunnel/stunnel.pem:ro
      - ./data/tls/mailhog-tls.key:/etc/stunnel/stunnel.key:ro
